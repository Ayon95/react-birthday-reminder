import { useState, useEffect, useRef, useContext } from 'react';
import { useHistory, useParams } from 'react-router-dom';
import { GlobalContext } from '../contexts/GlobalContext.js';
import { capitalize } from '../helpers.js';
import { v4 } from 'uuid';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { AuthContext } from '../contexts/AuthContext.js';
import { db } from '../firebase/firebase.js';
import formService from '../services/formService.js';

function FormComponent({ formType, formTitle }) {
	const { addPerson, editPerson } = useContext(GlobalContext);
	const { id } = useParams();
	const { currentUser } = useContext(AuthContext);

	const [addingBirthday, setAddingBirthday] = useState(false);
	const [error, setError] = useState(null);

	const history = useHistory();
	const formRef = useRef();
	const nameInputRef = useRef(null);

	// schema object for input validation
	const schema = Yup.object(formService.schemaObject);

	// set focus on the name input whenever formType changes
	// clear all input fields at the beginning (in case the user goes from the edit form to the add form without editing anything)
	useEffect(() => {
		nameInputRef.current?.focus();
		if (formType === 'add') formRef.current.resetForm();
	}, [formType]);

	// need to load data and fill the input fields with existing data when this component is rendered (when the user wants to edit a birthday)
	useEffect(() => {
		if (formType === 'edit') {
			(async () => {
				try {
					// const response = await fetch(`http://localhost:8000/people/${id}`);
					// const person = await response.json();
					// find the person that the user wants to edit using the person's id
					const response = await db.collection('persons').doc(id).get(); // this will return a doc
					const person = response.data();

					formRef.current?.setFieldValue('name', person.name);
					formRef.current?.setFieldValue('month', person.month);
					formRef.current?.setFieldValue('date', person.date);
					formRef.current?.setFieldValue('year', person.year);
				} catch (error) {
					setError('Network error. Please try again later.');
				}
			})();
		}
		return null;
	}, [formType, id]);

	async function handleSubmit() {
		try {
			setAddingBirthday(true);

			// checking for internet connection; firestore doesn't throw error when there is no internet connection
			if (!window.navigator.onLine)
				throw new Error('Failed to submit due to a connection error. Please try again later.');

			// adding or updating person
			const person = {
				// generate new id when adding a new person; use the existing id if editing the person
				id: formType === 'add' ? v4() : id,
				userId: currentUser.uid,
				name: capitalize(formRef.current.values.name.trim()),
				month: capitalize(formRef.current.values.month.trim()),
				date: formRef.current.values.date,
				year: formRef.current.values.year,
			};

			// updating local state
			if (formType === 'add') addPerson(person);
			if (formType === 'edit') editPerson(person.id, person);

			// updating persons collection in the database
			// need to do it like this instead of .add() because I want to give each doc a custom id (not the one generated by firebase)
			await db.collection('persons').doc(person.id).set(person);

			setAddingBirthday(false);

			setError(null);
			formRef.current.resetForm();
			history.push('/all-birthdays');
		} catch (error) {
			setAddingBirthday(false);
			setError(error.message);
		}
	}

	return (
		<Formik
			initialValues={{
				name: '',
				month: '',
				date: '',
				year: '',
			}}
			onSubmit={handleSubmit}
			validationSchema={schema}
			innerRef={formRef}
			validateOnBlur={false}
		>
			{(formik) => (
				<div className="form-container">
					<h3 className="container__title form-container__title">{formTitle}</h3>
					<Form className="form" autoComplete="off">
						<label className="form__label">Name*</label>
						<Field
							type="text"
							className={`form__input ${formik.touched.name && formik.errors.name && 'form__input--invalid'}`}
							name="name"
							innerRef={nameInputRef}
						/>
						<ErrorMessage component="p" className="form__validation-error-message" name="name" />

						<label className="form__label">Month*</label>
						<Field
							type="text"
							className={`form__input ${formik.touched.month && formik.errors.month && 'form__input--invalid'}`}
							name="month"
							placeholder="e.g. Jan"
						/>
						<ErrorMessage component="p" className="form__validation-error-message" name="month" />

						<label className="form__label">Date*</label>
						<Field
							type="text"
							className={`form__input ${formik.touched.date && formik.errors.date && 'form__input--invalid'}`}
							name="date"
							placeholder="e.g. 14"
						/>
						<ErrorMessage component="p" className="form__validation-error-message" name="date" />

						<label className="form__label">Year</label>
						<Field
							type="text"
							className={`form__input ${formik.touched.year && formik.errors.year && 'form__input--invalid'}`}
							name="year"
							placeholder="e.g. 1996"
						/>
						<ErrorMessage component="p" className="form__validation-error-message" name="year" />

						{addingBirthday ? (
							<button disabled className="btn">
								Adding Birthday
							</button>
						) : (
							<button type="submit" className="btn">
								Submit
							</button>
						)}

						{error && <p className="message message--error">{error}</p>}
					</Form>
				</div>
			)}
		</Formik>
	);
}

export default FormComponent;
